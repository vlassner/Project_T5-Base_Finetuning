import os
import torch
import streamlit as st
from transformers import T5Tokenizer, T5ForConditionalGeneration
from newspaper import Article

# Disable streamlit warnings
os.environ["STREAMLIT_DISABLE_WATCHDOG_WARNINGS"] = "1"

# Load both models (fine-tuned and T5-base)
def load_models():
    try:
        # Load the fine-tuned model and tokenizer
        fine_tuned_tokenizer = T5Tokenizer.from_pretrained("vlassner01/t5_cnn_model_base")
        fine_tuned_model = T5ForConditionalGeneration.from_pretrained("vlassner01/t5_cnn_model_base")

        # Load the T5-base model and tokenizer
        base_tokenizer = T5Tokenizer.from_pretrained("t5-base")
        base_model = T5ForConditionalGeneration.from_pretrained("t5-base")
        
        return fine_tuned_tokenizer, fine_tuned_model, base_tokenizer, base_model
    except Exception as e:
        st.error(f"Error loading models or tokenizers: {e}")
        return None, None, None, None

# Initialize models and tokenizers
fine_tuned_tokenizer, fine_tuned_model, base_tokenizer, base_model = load_models()

# Summarize the input article text with any model
def summarize(text, tokenizer, model):
    input_text = "summarize: " + text
    input_ids = tokenizer.encode(input_text, return_tensors="pt", max_length=512, truncation=True)
    summary_ids = model.generate(input_ids, max_length=150, min_length=30, num_beams=4, early_stopping=True)
    return tokenizer.decode(summary_ids[0], skip_special_tokens=True)

# Fetch article content from the URL
def fetch_article(url):
    try:
        article = Article(url)
        article.download()
        article.parse()
        return article.text
    except Exception as e:
        st.error(f"Error fetching article: {e}")
        return None

# Streamlit UI
st.set_page_config(page_title="Custom T5 News Summarizer", layout="centered")
st.title("Fine-Tuned vs T5-Base News Summarizer")
st.markdown("Paste a news article URL below and get summaries generated by a fine-tuned T5 model and the standard T5-base model.")

url = st.text_input("Enter Article URL")

if st.button("Summarize"):
    if url:
        with st.spinner("Fetching and summarizing..."):
            article_text = fetch_article(url)
            if article_text:
                st.success("Article loaded!")
                
                # Display the full article text (can be expanded)
                with st.expander("ðŸ“„ Full Article Text"):
                    st.write(article_text)
                
                # Generate summaries from both models
                fine_summary = summarize(article_text, fine_tuned_tokenizer, fine_tuned_model)
                base_summary = summarize(article_text, base_tokenizer, base_model)
                
                # Display the summaries
                st.subheader("Fine-Tuned Model Summary:")
                st.write(fine_summary)
                
                st.subheader("T5-Base Model Summary:")
                st.write(base_summary)
            else:
                st.error("Could not fetch the article. Please try another URL.")
    else:
        st.warning("Please enter a URL.")  # Show warning if empty
